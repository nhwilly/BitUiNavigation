@inherits LayoutComponentBase

<BitMediaQuery ScreenQuery="BitScreenQuery.Xs" OnChange="v => { IsMobile = v; }" />
@if (!ready)
{
    <div style="position: absolute; left: 50%; top: 15%; transform: translate(-50%, 0);">
        <BitSpinnerLoading />
    </div>
}
else
{
    <BitSticky Position="BitStickyPosition.Top">
        <BitHeader>
            @if (IsMobile)
            {
                @* Show the left panel *@
@*                 <BitButton OnClick="ToggleLeftMobilePanel" Variant="@BitVariant.Text" IconName="@BitIconName.Accept" /> *@
                <BitPersona ImageInitials="ma" @onclick="ToggleLeftMobilePanel"></BitPersona>

            }
            else
            {
                @* Toggle the icon only display *@
                <BitButton OnClick="(bool x) => ShowLeftIconsOnly = !ShowLeftIconsOnly" Variant="@BitVariant.Text" IconName="@LeftHeaderIcon" />
            }
            <BitSpacer />
            <BitText Typography="@BitTypography.H5">My Application Header</BitText>
            <BitSpacer />
            @if (IsMobile)
            {
                <BitPersona ImageInitials="BW" @onclick="ToggleRightMobilePanel"></BitPersona>
@*                 <BitButton OnClick="ToggleRightMobilePanel" Variant="@BitVariant.Text" IconName="@BitIconName.Camera" /> *@
            }
            else
            {
                <BitButton OnClick="ToggleRightIconsOnly" Variant="@BitVariant.Text" IconName="@RightHeaderIcon" />
            }
        </BitHeader>
    </BitSticky>


    <BitPanel @bind-IsOpen="@ShowLeftPanel" Position="BitPanelPosition.Start">
        <BitNav @ref="AccountNav" Items="LeftNavItems" FitWidth Style="background: #f5f5f5;" OnItemClick="(BitNavItem item) => ShowLeftPanel = false" IconOnly="false" />
    </BitPanel>

    <BitPanel @bind-IsOpen="@ShowRightPanel" Position="BitPanelPosition.End">
        <BitNav @ref="UserNav" Items="RightNavItems" FitWidth Style="background: #f5f5f5;" OnItemClick="(BitNavItem item) => ShowRightPanel = false" IconOnly="false" />
    </BitPanel>

    <div style="display: flex; height: calc(100vh - 64px);">
        @if (!IsMobile)
        {
            <div style="position: sticky; top: 64px; height: calc(100vh - 128px); z-index: 1;">
                <BitNav @ref="AccountNav" TItem="BitNavItem" Items="LeftNavItems" FitWidth Style="background: #f5f5f5;" IconOnly="@ShowLeftIconsOnly" />
            </div>
        }

        <!-- Main Content -->
        <div style="flex: 1; padding: 1rem; overflow-y: auto; height: calc(100vh - 128px);">
            @Body
        </div>

        @if (!IsMobile)
        {
            <div style="position: sticky; top: 64px; height: calc(100vh - 64px); z-index: 1;">
                <BitNav @ref="UserNav" TItem="BitNavItem" Items="RightNavItems" FitWidth Style="background: #f5f5f5;" IconOnly="@ShowRightIconsOnly" />
            </div>
        }
    </div>
}
@code {
    private bool ShowLeftIconsOnly = false;
    private bool ShowRightIconsOnly = false;
    private bool IsMobile { get; set; }
    private bool ShowLeftPanel { get; set; }
    private bool ShowRightPanel { get; set; }
    private string LeftHeaderIcon => ShowLeftIconsOnly ? BitIconName.SidePanel : BitIconName.SidePanelMirrored;
    private string RightHeaderIcon => ShowRightIconsOnly ? BitIconName.SidePanelMirrored : BitIconName.SidePanel;


    private List<BitNavItem> LeftNavItems = new()
    {
        new BitNavItem { Text = "Home", Url = "/", Key = "home", IconName = "Home" },
        new BitNavItem { Text = "About", Url = "/about", Key = "about", IconName = "Info" }
    };

    private List<BitNavItem> RightNavItems = new()
    {
        new BitNavItem { Text = "Settings", Url = "/settings", Key = "settings", IconName = "Settings" },
        new BitNavItem { Text = "Profile", Url = "/profile", Key = "profile", IconName = "Contact" }
    };

    private void ToggleLeftIconsOnly()
    {
        if (IsMobile)
        {
            ShowLeftPanel = true;
        }
        else
        {
            ShowLeftIconsOnly = !ShowLeftIconsOnly;
        }
    }
    private void ToggleRightIconsOnly()
    {
        if (IsMobile)
        {
            ShowRightPanel = true;
        }
        else
        {
            ShowRightIconsOnly = !ShowRightIconsOnly;
        }
    }

    private void ToggleLeftMobilePanel()
    {
        ShowLeftPanel = !ShowLeftPanel;
    }
    private void ToggleRightMobilePanel()
    {
        ShowRightPanel = !ShowRightPanel;
    }

    private void DoSomething(BitNavItem args)
    {
        Console.WriteLine("clicked!");
    }
    private BitNav<BitNavItem>? AccountNav { get; set; }
    private BitNav<BitNavItem>? UserNav { get; set; }
    bool ready { get; set; }
    protected override void OnInitialized()
    {
        ready = false;
        base.OnInitialized();
        // Initialize any additional logic if needed
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        base.OnAfterRender(firstRender);
        if (!ready)
        {
            // Simulate some async operation, e.g., fetching data
            ready = true; // Set ready to true after the operation
            StateHasChanged(); // Request a re-render
        }
    }
}
