@inherits TimeWarpStateComponent
<BitMediaQuery Query="screen and (max-width: 640px)" OnChange="@SetDisplaySize" />
@if (IsSmallDisplay)
{
    <div style="margin: .5rem 0rem 0rem 1rem;">
        <BitButton Size="@BitSize.Small" IconName="@(ShowNavItemText? @BitIconName.ClosePaneMirrored: @BitIconName.ClosePane)" Variant="@BitVariant.Text" OnClick="@ToggleOpenNavPanel" />
    </div>
}
@foreach (var section in NavSectionDetails)
{
    @if (!IsSmallDisplay || ShowNavItemText)
    {
        <div style="margin: 1rem .5rem 0rem 1rem; white-space:nowrap; overflow:hidden; text-overflow:ellipsis;">
            <BitText Color="@BitColor.PrimaryBorder" Typography="@BitTypography.Subtitle1">
                @(section.Title.ToUpper())
            </BitText>
        </div>
    }
    <BitNav IsEnabled="@(!ModalHostState.IsBusy)" TItem="CustomNavItem"
            Styles="@NavStyles"
            IconOnly="@ShowIconsOnly"
            Mode="BitNavMode.Automatic"
            Items="@(section.CustomNavItems)"
            Match="BitNavMatch.Wildcard"
            OnItemClick="(CustomNavItem item) => HandleNavItemClick(item)"
            NameSelectors="@(new BitNavNameSelectors<CustomNavItem>
            {
                Text = { Name = nameof(CustomNavItem.Text) },
                Url = { Name = nameof(CustomNavItem.Url) },
                IconName = { Name = nameof(CustomNavItem.IconName) },

            })">
    <ItemTemplate Context="item">
        <CustomNav NavItem="item" ShowItemText="@(!IsSmallDisplay || ShowNavItemText)" />
    </ItemTemplate>
</BitNav>
        }


@code {
    [Parameter, EditorRequired] public List<NavSectionDetail> NavSectionDetails { get; set; }
    private ModalHostState ModalHostState => GetState<ModalHostState>();

    bool IsSmallDisplay { get; set; }
    private bool ShowNavItemText = true;
    void ToggleOpenNavPanel() => ShowNavItemText = !ShowNavItemText;

    bool ShowIconsOnly => IsSmallDisplay && !ShowNavItemText;

    void SetDisplaySize(bool isSmall)
    {
        IsSmallDisplay = isSmall;
        ShowNavItemText = false;
    }

    private Task HandleNavItemClick(CustomNavItem _)
    {
        // BitNav will navigate (Mode=Automatic). We just close the panel.
        ShowNavItemText = IsSmallDisplay ? false : true;
        return Task.CompletedTask;
    }
    BitNavClassStyles NavStyles => ShowIconsOnly ? SmallNavStyles : LargeNavStyles;
    static readonly BitNavClassStyles SmallNavStyles = new()
    {
        ItemContainer = "padding-inline-start:0;padding-inline-end:0;"
    };

    static readonly BitNavClassStyles LargeNavStyles = new()
    {
        ItemContainer = "padding-inline-start:1rem;padding-inline-end:1rem;"
    };
}