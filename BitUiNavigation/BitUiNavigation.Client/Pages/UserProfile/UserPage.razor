@inject NavigationManager Nav
@implements IDisposable
@using System.Web
@using BitUiNavigation.Client.Pages.Modal.Components
@using Microsoft.AspNetCore.Components.Routing

@if (_isOpen)
{
    <BitModal IsOpen="true"
              OnOverlayClick="@Close"
              OnDismiss="@Close"
              Style="width: 900px; height: 640px;">
        <div style="display:flex; height:100%;">
            <BitNav Mode="BitNavMode.Automatic"
                    Items="@BuildNavItems()"
                    Style="width:250px; border-right:1px solid #e5e5e5;" />

            <div style="flex:1; padding:1rem; overflow:auto;">
                <RouteView @key="_sectionKey"
                           RouteData="@BuildRouteData(_sectionKey)"
                           DefaultLayout="@typeof(EmptyLayout)" />
            </div>
        </div>
    </BitModal>
}

@code {
    [Parameter] public string QueryKey { get; set; } = "modal";

    private bool _isOpen;
    private string _sectionKey = nameof(UserMembershipsPanel);
    private string? _previousUrl;

    private bool _prevIsOpen;
    private string _prevSectionKey = "";

    protected override void OnInitialized()
    {
        Nav.LocationChanged += OnLocationChanged;
        ReadStateFrom(Nav.Uri, requestStateHasChanged: false);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender) ReadStateFrom(Nav.Uri, requestStateHasChanged: true);
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
        => ReadStateFrom(e.Location, requestStateHasChanged: true);

    private void ReadStateFrom(string fullUri, bool requestStateHasChanged)
    {
        var uri = new Uri(fullUri);
        var qs = HttpUtility.ParseQueryString(uri.Query);
        var raw = qs[QueryKey];

        var newIsOpen = !string.IsNullOrWhiteSpace(raw);
        var newSectionKey = NormalizeSection(raw);

        if (newIsOpen && !_isOpen && string.IsNullOrEmpty(_previousUrl))
        {
            _previousUrl = RemoveQueryParam(fullUri, QueryKey);
        }

        _isOpen = newIsOpen;
        _sectionKey = newSectionKey;

        var changed = _isOpen != _prevIsOpen || !string.Equals(_sectionKey, _prevSectionKey, StringComparison.Ordinal);
        _prevIsOpen = _isOpen;
        _prevSectionKey = _sectionKey;

        if (requestStateHasChanged && changed) StateHasChanged();
    }

    private void Close()
    {
        if (!string.IsNullOrEmpty(_previousUrl))
        {
            Nav.NavigateTo(_previousUrl!, replace: true);
            _previousUrl = null;
        }
        else
        {
            var stripped = Nav.GetUriWithQueryParameter(QueryKey, (string?)null);
            Nav.NavigateTo(stripped, replace: true);
        }
    }

    private void NavigateWithinModal(string section)
    {
        var next = Nav.GetUriWithQueryParameter(QueryKey, NormalizeSection(section));
        Nav.NavigateTo(next, replace: false);
    }

    private List<BitNavItem> BuildNavItems()
    {
        string urlFor(string section) => Nav.GetUriWithQueryParameter(QueryKey, NormalizeSection(section));

        return new()
        {
            new() { Key = nameof(UserMembershipsPanel),                 Text = "Settings", Url = urlFor(nameof(UserMembershipsPanel)) },
            new() { Key = nameof(UserProfilePanel),                     Text = "Profile",  Url = urlFor(nameof(UserProfilePanel)) }
        };
    }

    private static RouteData BuildRouteData(string key)
    {
        var map = new Dictionary<string, Type>(StringComparer.OrdinalIgnoreCase)
        {
            [nameof(UserMembershipsPanel)] = typeof(UserMembershipsPanel),
            [nameof(UserProfilePanel)] = typeof(UserProfilePanel)
        };
        var type = map.TryGetValue(key, out var t) ? t : typeof(NotFoundPanel);
        return new RouteData(type, new Dictionary<string, object?>());
    }

    private static string RemoveQueryParam(string fullUri, string key)
    {
        var uri = new Uri(fullUri);
        var qs = HttpUtility.ParseQueryString(uri.Query);
        qs.Remove(key);
        var builder = new UriBuilder(uri) { Query = qs.ToString() ?? string.Empty };
        return builder.Uri.ToString();
    }

    private static string NormalizeSection(string? value)
    {
        if (string.IsNullOrWhiteSpace(value)) return nameof(UserMembershipsPanel);
        var v = value.Trim();
        if (v.StartsWith("/")) v = v[1..];
        return v;
    }

    public void Dispose() => Nav.LocationChanged -= OnLocationChanged;
}
