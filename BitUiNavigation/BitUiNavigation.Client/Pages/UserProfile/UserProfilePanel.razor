@using BitUiNavigation.Client.Pages.Modals
@using Blazored.FluentValidation
@using FluentValidation
@implements IModalSectionGuard
@implements ISupportsSaveOnNavigate
<EditForm Model="@_model">
    <FluentValidationValidator />
    <ValidationSummary />

    <InputText @bind-Value="@_model.FirstName" />
    <InputText @bind-Value="@_model.LastName" />

    <BitButton OnClick="Save">Save</BitButton>
</EditForm>
Hello from User profile page.
@code {
    [CascadingParameter] public ModalGuardRegistration? RegisterGuard { get; set; }
    private bool _hasBeenRegistered = false;

    private UserProfileModel _model = new();
    private UserService _userService = new();
    private UserProfileModelValidator _validator = new();
    protected override void OnInitialized()
    {
        if (!_hasBeenRegistered)
        {
            Console.WriteLine($"OnInitialized.. activated: {_hasBeenRegistered}");

            _hasBeenRegistered = true;
            RegisterGuard?.Invoke(this);
        }
    }


    public Task<bool> CanNavigateAwayAsync()
    {
        if (!_hasBeenRegistered)
        {
            Console.WriteLine($"Can navigate away.. activated: {_hasBeenRegistered}");

            // Don't validate on first load
            return Task.FromResult(true);
        }
        var isValid = ValidateModel();
        Console.WriteLine($"Can navigate away..{isValid}");
        return Task.FromResult(isValid);
    }

    private bool ValidateModel()
    {
        Console.WriteLine("Validating model...");

        return _validator.Validate(_model).IsValid;
    }

    public async Task SaveOnNavigateAsync()
    {
        if (!_hasBeenRegistered)
        {
            // Skip save on first render
            return;
        }
        if (ValidateModel())
        {
            await _userService.SaveUserAsync(_model); // for example
        }
    }
    private async Task Save()
    {
        Console.WriteLine("Save in panel has been called...");
        if (ValidateModel())
        {
            await _userService.SaveUserAsync(_model);
        }
    }
    public class UserProfileModel
    {
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
    }
    public class UserProfileModelValidator : AbstractValidator<UserProfileModel>
    {
        public UserProfileModelValidator()
        {
            RuleFor(x => x.FirstName).NotEmpty().WithMessage("First name is required");
            RuleFor(x => x.LastName).NotEmpty().WithMessage("Last name is required");
        }
    }

    public class UserService
    {
        public async Task SaveUserAsync(UserProfileModel model)
        {
            Console.WriteLine("Saving user inside userService...");
            // Simulate saving user data
            await Task.CompletedTask;
        }

    }
}