@inherits TimeWarpStateComponent
@using Bit.BlazorUI
@using BitUiNavigation.Client.Services

<BitStack Horizontal Alignment="BitAlignment.End" Style="padding-right: 1rem;">
    <BitText Class="modal-status">
        @StatusIcon
    </BitText>
    @StatusText
</BitStack>
@* <style>
    .extra-small-loading {
        transform: scale(0.7);
        transform-origin: center;
    }

    .modal-status {
        opacity: 1;
        transition: opacity 0.5s ease-in-out;
    }

        .modal-status.bit-txt.bit-txt.subtitle1 {
            line-height: 12px !important;
            margin: 0px !important;
            padding: 0px !important;
        }

        /* Optional: Add a class to fade out “Saved” after a short time */
        .modal-status.saved-fade {
            animation: fadeOut 3s forwards;
        }

    @@keyframes fadeOut {
        0% {
            opacity: 1;
        }

        70% {
            opacity: 1;
        }

        100% {
            opacity: 0;
        }
    }

</style> *@

@code {

    private ModalHostState ModalHostState => GetState<ModalHostState>();

    private string StatusText =>
        ModalHostState.IsSaving ? "Saving..."
        : ModalHostState.IsSaved ? "Saved"
        : ModalHostState.IsChanged ? "Unsaved changes"
        : ModalHostState.IsFetching ? "Fetching"
        : string.Empty;

    private RenderFragment? StatusIcon => ModalHostState switch
    {
        { IsSaving: true } => @<BitIcon IconName="Sync" />,
        { IsSaved: true } => @<BitIcon IconName="CheckMark" />,
        { IsChanged: true } => @<BitIcon IconName="Edit" />,
        { IsFetching: true } =>@<BitDotsRingLoading CustomSize=24 />,
    _ => null
    };

}
