@using Bit.BlazorUI

@if (Show)
{
    <BitStack Horizontal AlignItems="BitAlignment.Center"
              Style="@($"gap: .5rem; padding: .25rem .75rem; border-radius: 6px; background-color: {BackgroundColor}; color: white; transition: opacity 0.3s ease; opacity: {(FadingOut ? 0 : 1)}")">

        @if (IsSaving)
        {
            <BitProgress Circular />
            <span>Saving...</span>
        }
        else if (IsSaved)
        {
            <BitIcon IconName="CheckMark" Style="color: white;" />
            <span>Saved</span>
        }
        else if (IsChanged)
        {
            <BitIcon IconName="Info" Style="color: white;" />
            <span>Unsaved changes</span>
        }
    </BitStack>
}

@code {
    [Parameter] public bool IsChanged { get; set; }
    [Parameter] public bool IsSaving { get; set; }
    [Parameter] public bool IsSaved { get; set; }

    private bool FadingOut => IsSaved && _fadeStartTime.HasValue && (DateTime.UtcNow - _fadeStartTime.Value).TotalMilliseconds > 1000;
    private DateTime? _fadeStartTime;

    private bool Show => IsSaving || IsChanged || IsSaved;

    protected override void OnParametersSet()
    {
        if (IsSaved)
        {
            _fadeStartTime ??= DateTime.UtcNow;
            // Trigger re-render for fade
            _ = Task.Delay(100).ContinueWith(_ => InvokeAsync(StateHasChanged));
        }
        else
        {
            _fadeStartTime = null;
        }
    }

    private string BackgroundColor =>
        IsSaving ? "#0078D4" :
        IsSaved ? "#107C10" :
        IsChanged ? "#605E5C" : "transparent";
}
