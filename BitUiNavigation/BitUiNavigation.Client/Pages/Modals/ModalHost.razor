@inherits TimeWarpStateComponent
@inject NavigationManager NavManager
@inject IModalProviderSource ModalProviderSource
@inject ILogger<ModalHost> Logger
@implements IDisposable
@using BitUiNavigation.Client.Services
@using static UrlExtensions

@if (_activeModalProvider is not null)
{
    <BitModal IsOpen="true"
              OnOverlayClick="@TryCloseAsync"
              OnDismiss="@TryCloseAsync"
              Classes="@ClassStyles">

        <BitStack Horizontal Gap="0rem" Style="height: 100%">
            <BitStack Class="nav-panel" FitWidth Style="border-top-left-radius:20px; border-bottom-left-radius:20px;">
                <BitButton Style="margin: 1rem 0 0 1rem"
                           Color="BitColor.Tertiary"
                           OnClick="@TryCloseAsync"
                           IconOnly
                           Size="BitSize.Small"
                           IconName="@BitIconName.ChromeClose"
                           Variant="BitVariant.Text" />
                <NavSections NavSectionDetails="@(_activeModalProvider.BuildCustomNavSections(NavManager))" />
            </BitStack>

            <div style="flex:1;display:flex;flex-direction:column;height:100%">
                <div style="flex-shrink:0;border-top-right-radius:20px;">
                    <BitStack Style="padding:1.25rem 1rem 1rem;"
                              Horizontal
                              VerticalAlign="BitAlignment.Baseline"
                              HorizontalAlign="BitAlignment.SpaceBetween">
                        <BitText Style="font-weight:600;font-size:16px;">
                            @ModalHostState.Title
                        </BitText>
                        <ModelStateStatus />
                    </BitStack>
                </div>

                <BitSeparator Border="BitColorKind.Tertiary" />

                @if (_providerValidationMessages?.Count > 0)
                {
                    <BitText Style="padding:0 1rem; font-weight:600;" Color="@BitColor.Info">
                        Please resolve these issues:
                    </BitText>
                    <BitMessage Multiline Style="width: auto; margin: 0rem 1rem;" Color="@BitColor.Error">
                        <ul style="margin:0; padding-left:1rem;">
                            @foreach (var msg in _providerValidationMessages)
                            {
                                <li>@msg</li>
                            }
                        </ul>
                    </BitMessage>
                }

                <div style="flex:1;overflow:hidden;border-bottom-right-radius:20px;position:relative;">
                    <div style="height:100%;overflow-y:auto;">
                        <div style="padding:1rem;">
                            <CascadingValue TValue="@ModalContext" Value="@_ctx">
                                <RouteView @key="_panelName"
                                           RouteData="@_activeModalProvider.BuildRouteData(_panelName)"
                                           DefaultLayout="@typeof(EmptyLayout)" />
                            </CascadingValue>
                        </div>
                    </div>
                </div>
            </div>
        </BitStack>
    </BitModal>
}

<style>
    @((MarkupString)CreateContainerCss())

    .nav-panel {
        background-color: var(--bit-clr-bg-sec);
    }

    .nav-item-container {
        border-radius: 12px !important;
        margin-bottom: 4px !important;
        height: 18px !important;
    }

    .nav-selected-item-container {
        border-color: transparent !important;
    }
</style>

@code {
    private IModalProvider? _activeModalProvider;
    private string _panelName = string.Empty;
    private string? _preOpenUrl;
    private IModalPanel? _panel;
    private bool _needsSessionInit = false;
    private bool MissingPanelValidityBlocksClose => false; // flip to true if you want stricter policy
    private List<string>? _providerValidationMessages;
    private ModalHostState ModalHostState => GetState<ModalHostState>();

    private ModalContext _ctx => new()
    {
        ProviderKey = _activeModalProvider?.ProviderName ?? "UnknownProvider",
        PanelName = _panelName // or nameof(UserProfilePanel) if you map it
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ReadFromUri(NavManager.Uri, requestStateHasChanged: true);
        }

        if (_needsSessionInit && _activeModalProvider is not null)
        {
            _needsSessionInit = false;
            // call provider *after* first render
            await _activeModalProvider.OnModalOpenedAsync(CancellationToken);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private bool CanCloseActiveProvider()
    {
        if (_activeModalProvider is null) return true;

        var providerKey = _activeModalProvider.ProviderName;

        // Normalize your keys the same way you publish them from ModalPanelBase / ModalContext
        var expectedPanelKeys = _activeModalProvider.ExpectedPanelKeys; // <-- now public

        return GetState<ModalHostState>()
            .ArePanelsValid(providerKey, expectedPanelKeys, MissingPanelValidityBlocksClose);
    }

    private void RegisterPanel(IModalPanel panel)
        => _panel = panel;

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        // fire-and-forget wrapper that calls your async method
        _ = OnLocationChanged(sender, e);
    }

    protected override async Task OnInitializedAsync()
    {
        NavManager.LocationChanged += HandleLocationChanged;
        await ReadFromUri(NavManager.Uri, requestStateHasChanged: false);
    }

    private async Task OnLocationChanged(object? sender, LocationChangedEventArgs e)
        => await ReadFromUri(e.Location, requestStateHasChanged: true);

    /// <summary>
    /// Inspects the provided URI and determines if it matches any of the model providers
    /// that were registered in dependency injection.  Selects a panel from the route
    /// or selects a default panel if none exists.  Finally it fires the OnModalOpeningAsync
    /// to allow the modal provider to initialize it's values.
    /// </summary>
    /// <param name="fullUri"></param>
    /// <param name="requestStateHasChanged"></param>
    private async Task ReadFromUri(string fullUri, bool requestStateHasChanged)
    {
        var uri = new Uri(fullUri);
        var qs = HttpUtility.ParseQueryString(uri.Query);

        // check all the modal providers and ensure that the one
        // we are navigating to matches.
        var match = ModalProviderSource
            .GetModalProviders()
            .FirstOrDefault(p =>
                !string.IsNullOrWhiteSpace(qs[p.ProviderName]));

        var newPanelName = match is null
            ? null
            : Normalize(qs[match.ProviderName], match.DefaultPanel);

        var wasActive = _activeModalProvider is not null;
        var willBeActive = match is not null;

        if (willBeActive && !wasActive)
        {
            // Store previous URL (to restore when modal closes)
            _preOpenUrl = RemoveQueryParam(fullUri, match!.ProviderName);

            Logger.LogDebug("OnModalOpeningAsync for provider '{ProviderName}'", match.ProviderName);
            // call modal provider hook to initialize
            await match!.OnModalOpeningAsync(CancellationToken);
            _needsSessionInit = true;
        }

        // Detect modal close
        if (!willBeActive && wasActive)
        {
            _preOpenUrl = null;
        }

        // Handle panel navigation
        _activeModalProvider = match;
        var oldPanelName = _panelName;
        _panelName = newPanelName ?? string.Empty;
        Logger.LogDebug("Changing panels from '{OldPanel}' to '{NewPanel}'", oldPanelName, newPanelName);

        if (requestStateHasChanged)
            StateHasChanged();
    }

    private async Task TryCloseAsync()
    {
        if (!CanCloseActiveProvider())
        {
            // show a toast/snack bar/banner as you like
            return;
        }
        // Optional provider-specific hook (non-blocking if you don't need it)
        if (_activeModalProvider is IBeforeCloseHook hook)
        {
            var ok = await hook.OnBeforeCloseAsync(CancellationToken);
            if (!ok) return;
        }

        if (_activeModalProvider is not null)
        {
            var (isValid, messages) = await _activeModalProvider.ValidateProviderAsync(CancellationToken);
            if (!isValid)
            {
                // cache messages for UI and block close
                _providerValidationMessages = messages?.ToList() ?? [];
                StateHasChanged();
                return;
            }

            // clear any prior provider errors
            _providerValidationMessages = null;
        }

        // proceed with existing close logic...
        if (!string.IsNullOrEmpty(_preOpenUrl))
        {
            NavManager.NavigateTo(_preOpenUrl!, replace: true);
        }
        // the preOpenUrl was empty, let's just deduce it from our current location.
        else if (_activeModalProvider is not null)
        {
            var stripped = NavManager.GetUriWithQueryParameter(_activeModalProvider.ProviderName, (string?)null);
            NavManager.NavigateTo(stripped, replace: true);
        }

        _preOpenUrl = null;
        _activeModalProvider = null;
        _panelName = string.Empty;
        _panel = null;
    }

    public override void Dispose()
    {
        NavManager.LocationChanged -= HandleLocationChanged;
        base.Dispose();
    }

    private static readonly string ModalContainerClass = "modal-container";

    private string CreateContainerCss()
    {
        if (_activeModalProvider is null) return string.Empty;
        return $@"
        .{ModalContainerClass} {{
            width:  {_activeModalProvider.Width};
            height: {_activeModalProvider.Height};
            border-radius:20px;
        }}";
    }

    readonly BitModalClassStyles ClassStyles = new()
    {
        Content = ModalContainerClass,
    };

    static BitNavClassStyles NavStyles => new()
    {
        SelectedItemContainer = "nav-selected-item-container",
        ItemContainer = "nav-item-container",
        Item = "nav-item",
        SelectedItem = "nav-selected-item",
    };

}
