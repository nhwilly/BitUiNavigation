<style>
    .modal-header {
        gap: 0.5rem;
        display: flex;
        font-size: 24px;
        font-weight: 600;
        align-items: center;
        padding: 12px 12px 14px 24px;
        border-top: 4px solid #0054C6;
    }

    .modal-header-text {
        flex-grow: 1;
    }

    .modal-body {
        max-width: 960px;
        line-height: 20px;
        overflow-y: hidden;
        padding: 0 24px 24px;
    }
</style>

<BitModal IsOpen="IsOpen"
          OnOverlayClick="HandleOverlayClick"
          OnDismiss="HandleDismiss"
          Position="position">
    <div class="modal-header">
        <span class="modal-header-text">Modal positioning</span>
        <BitButton Variant="BitVariant.Text"
                   OnClick="Close"
                   IconName="@BitIconName.ChromeClose"
                   Title="Close" />
    </div>
    <div class="modal-body">
        <BitNav TItem="BitNavItem" Items="UserNavItems" FitWidth Style="background: #f5f5f5;"  Match="BitNavMatch.Prefix" />

    </div>
</BitModal>

@code {
    [Parameter, EditorRequired] public bool IsOpen { get; set; }
    [Parameter, EditorRequired] public EventCallback OnClosed { get; set; }
    public bool IsValid { get; set; } = true;
    private BitPosition position;

    private void HandleOverlayClick(MouseEventArgs args)
    {
        // this needs to be handled to allow the modal to close when clicking outside
        Console.WriteLine("Clicked outside the modal");
        // doing it this way causes the parent to close the modal, which 
        // will cause the HandleDismiss to be called
        OnClosed.InvokeAsync();
    }
    private List<BitNavItem> UserNavItems = new()
    {
        new BitNavItem { Text = "Settings", Url = $"/settings/", Key = "settings", IconName = "Settings"},
        new BitNavItem { Text = "Profile", Url = "/profile", Key = "profile", IconName = "Contact"  },
    };

    private void HandleDismiss(MouseEventArgs args)
    {
        // this gets call when the parent sets the IsOpen to false,
        // so anytime the model is closed, either by clicking the close button or the overlay
        Console.WriteLine("Trying to dismiss...");
        // Close();
    }

    private void Close()
    {
        Console.WriteLine("Validation would occur now");
        // we would validate here so we can keep it open if needed
        OnClosed.InvokeAsync();
    }
}
