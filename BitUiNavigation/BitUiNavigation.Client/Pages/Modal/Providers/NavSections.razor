@using BitUiNavigation.Client.Services
@inherits TimeWarpStateComponent
<BitMediaQuery Query="screen and (max-width: 640px)" OnChange="@SetDisplaySize" />
@foreach (var section in NavSectionDetails)
{

    <BitText Typography="@BitTypography.Subtitle1">@(section.Title.ToUpper())</BitText>
    <BitNav IconOnly="@false"
            Mode="BitNavMode.Automatic"
            Items="@(section.CustomNavItems)"
            Match="BitNavMatch.Wildcard"
            FitWidth
            Style="margin:0 1rem"
            Classes="NavStyles"
            NameSelectors="@(new BitNavNameSelectors<CustomNavItem>
            {
                Text = { Name = nameof(CustomNavItem.Text) },
                Url = { Name = nameof(CustomNavItem.Url) },
                IconName = { Name = nameof(CustomNavItem.IconName) },

            })">
    <ItemTemplate Context="item">
        <BitStack Horizontal VerticalAlign="BitAlignment.Center" Style="width:100%; gap:.5rem;">
            <!-- Left group -->
            <BitStack Horizontal VerticalAlign="BitAlignment.Center"
                      Style="flex:1 1 auto; min-width:0; gap:.5rem;">
                <BitIcon IconName="@item.IconName" />
                @if (string.IsNullOrEmpty(item.ValidationIconName))
                    {

                    }
                    else
                    {
                        
                    }
                    {
                        <BitBadge Visibility="@(!string.IsNullOrEmpty(item.ValidationIconName) ? BitVisibility.Visible : BitVisibility.Hidden)" Dot Size="BitSize.Small" Position="BitPosition.CenterEnd" Color="BitColor.Error">
                            <BitIcon IconName="@item.IconName" />
                        </BitBadge>
                    }
                    else
                    {
                        <BitIcon IconName="@item.IconName" />
                        <BitText Style="white-space:nowrap; overflow:hidden; text-overflow:ellipsis;">
                            @item.Text
                        </BitText>
                    }

                </BitStack>

                <!-- Right endcap: fixed width to prevent width changes -->
                <div style="width:20px; display:flex; justify-content:flex-end;">
                    @if (!string.IsNullOrEmpty(item.ValidationIconName))
                    {
                        <BitIcon IconName="@item.ValidationIconName" Color="@BitColor.Error" />
                    }
                    else
                    {
                        <!-- invisible placeholder keeps width stable -->
                        <span style="width:16px; height:16px; display:inline-block; opacity:0;"></span>
                    }
                </div>
            </BitStack>
        </ItemTemplate>
    </BitNav>
}

@code {
    [Parameter, EditorRequired] public List<NavSectionDetail> NavSectionDetails { get; set; }
    private ModalHostState ModalHostState => GetState<ModalHostState>();
    bool IsSmallDisplay { get; set; }
    private void SetDisplaySize(bool isSmall) => IsSmallDisplay = isSmall;

    static BitNavClassStyles NavStyles => new()
    {
        SelectedItemContainer = "nav-selected-item-container",
        ItemContainer = "nav-item-container",
        Item = "nav-item",
        SelectedItem = "nav-selected-item",
    };
}
