@using BitUiNavigation.Client.Pages.ModalHost
@using BitUiNavigation.Client.Services
@using ModalHostState = BitUiNavigation.Client.Pages.ModalHost.State.ModalHostState
@inherits TimeWarpStateComponent
<BitMediaQuery Query="screen and (max-width: 640px)" OnChange="@SetDisplaySize" />
@foreach (var section in NavSectionDetails)
{
    @if (!IsSmallDisplay)
    {
        <div style="margin: 1rem .5rem 0rem 1rem; white-space:nowrap; overflow:hidden; text-overflow:ellipsis;">
            <BitText Color="@BitColor.PrimaryBorder" Typography="@BitTypography.Subtitle1">
                @(section.Title.ToUpper())
            </BitText>
        </div>
    }
    <BitNav 
            Styles="@NavStyles"
            IconOnly="@IsSmallDisplay"
            Mode="BitNavMode.Automatic"
            Items="@(section.CustomNavItems)"
            Match="BitNavMatch.Wildcard"
            NameSelectors="@(new BitNavNameSelectors<CustomNavItem>
            {
                Text = { Name = nameof(CustomNavItem.Text) },
                Url = { Name = nameof(CustomNavItem.Url) },
                IconName = { Name = nameof(CustomNavItem.IconName) },

            })">
    <ItemTemplate Context="item">
        <CustomNav Item="item" ShowItemText="@(!IsSmallDisplay)" />
    </ItemTemplate>
</BitNav>
}

@code {
    [Parameter, EditorRequired] public List<NavSectionDetail> NavSectionDetails { get; set; }
    private ModalHostState ModalHostState => GetState<ModalHostState>();
    bool IsSmallDisplay { get; set; }
    private void SetDisplaySize(bool isSmall) => IsSmallDisplay = isSmall;
    BitNavClassStyles NavStyles => IsSmallDisplay ? SmallNavStyles : LargeNavStyles;

    static readonly BitNavClassStyles SmallNavStyles = new()
    {
        ItemContainer = "padding-inline-start:0;padding-inline-end:0;"
    };

    static readonly BitNavClassStyles LargeNavStyles = new()
    {
        ItemContainer = "padding-inline-start:1rem;padding-inline-end:1rem;"
    };
}