@using BitUiNavigation.Client.Layout

<BitModal IsOpen="IsOpen"
          OnOverlayClick="HandleOverlayClick"
          OnDismiss="HandleDismiss"
          Position="position">
    <div style="display: flex; width: 100%; height: 600px;">
        <BitNav Items="@UserNavItems"
                Style="width: 200px; border-right: 1px solid #ccc;" />

        <div style="flex: 1; padding: 1rem;">
            <Router AppAssembly="@typeof(Program).Assembly">
                <Found Context="routeData">
                    <RouteView RouteData="routeData" DefaultLayout="@typeof(UserMemberships)"/>
                </Found>
                <NotFound>
                    what up - not found.
                </NotFound>
            </Router>
        </div>
    </div>
    <BitNav TItem="BitNavItem" Items="UserNavItems" FitWidth Style="background: #f5f5f5;" Match="BitNavMatch.Prefix" />

</BitModal>

@code {
    [Parameter, EditorRequired] public bool IsOpen { get; set; }
    [Parameter, EditorRequired] public EventCallback OnClosed { get; set; }
    // [Parameter] public string Section { get; set; } = default!;
    public bool IsValid { get; set; } = true;
    private BitPosition position;
    [Parameter] public string? Path { get; set; }

    protected override void OnParametersSet()
    {
        Console.WriteLine($"Navigated to user subroute: {Path}");
        // Logic to load the right component or data
        // if path is null or empty, default to profile

    }

    private void HandleOverlayClick(MouseEventArgs args)
    {
        // this needs to be handled to allow the modal to close when clicking outside
        Console.WriteLine("Clicked outside the modal");
        // doing it this way causes the parent to close the modal, which
        // will cause the HandleDismiss to be called
        OnClosed.InvokeAsync();
    }
    private List<BitNavItem> UserNavItems = new()
    {
        new BitNavItem { Text = "Memberships", Url = $"/user/memberships", Key = "settings", IconName = "Settings"},
        new BitNavItem { Text = "Profile", Url = "/user/profile", Key = "profile", IconName = "Contact"  },
    };

    private void HandleDismiss(MouseEventArgs args)
    {
        // this gets call when the parent sets the IsOpen to false,
        // so anytime the model is closed, either by clicking the close button or the overlay
        Console.WriteLine("Trying to dismiss...");
        // Close();
    }

    private void Close()
    {
        Console.WriteLine("Validation would occur now");
        // we would validate here so we can keep it open if needed
        OnClosed.InvokeAsync();
    }
}
